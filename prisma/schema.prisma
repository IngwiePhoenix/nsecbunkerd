// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./nsecbunker.db"
}

model KeyUser {
  id                Int                @id @default(autoincrement())
  keyName           String
  userPubkey        String
  description       String?
  signingConditions SigningCondition[]
  logs              Log[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  lastUsedAt        DateTime?
  Token             Token[]

  @@unique([keyName, userPubkey], name: "unique_key_user")
}

model SigningCondition {
  id Int @id @default(autoincrement())

  method         String?
  kind           String?
  content        String?
  keyUserKeyName String?
  allowed        Boolean?
  KeyUser        KeyUser? @relation(fields: [keyUserId], references: [id])
  keyUserId      Int?
}

model Log {
  id        Int      @id @default(autoincrement())
  timestamp DateTime
  type      String
  method    String?
  params    String?
  KeyUser   KeyUser? @relation(fields: [keyUserId], references: [id])
  keyUserId Int?
}

model Policy {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  deletedAt   DateTime?
  expiresAt   DateTime?
  rules       PolicyRule[]
  Token       Token[]
}

model PolicyRule {
  id                Int     @id @default(autoincrement())
  method            String
  kind              String?
  maxUsageCount     Int?
  currentUsageCount Int?

  Policy   Policy? @relation(fields: [policyId], references: [id])
  policyId Int?
}

model Token {
  id         Int       @id @default(autoincrement())
  keyName    String
  token      String    @unique
  clientName String
  createdBy  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  deletedAt  DateTime?
  expiresAt  DateTime?
  redeemedAt DateTime?
  KeyUser    KeyUser?  @relation(fields: [keyUserId], references: [id])
  keyUserId  Int?
  policy     Policy?   @relation(fields: [policyId], references: [id])
  policyId   Int?
}
